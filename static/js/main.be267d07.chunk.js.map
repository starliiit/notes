{"version":3,"sources":["components/notes.tsx","components/control.tsx","components/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CSSCenterFlex","flexDirection","display","alignItems","justifyContent","generateNote","array","Math","floor","random","length","Notes","bpm","playing","useState","note","setNote","className","setClassName","interval","bpmToInterval","refreshNote","setTimeout","useEffect","timerId","setInterval","clearInterval","style","width","height","backgroundColor","fontSize","ControlPanel","setBpm","setPlaying","label","margin","marginRight","onChange","value","parseInt","Number","isNaN","size","defaultValue","onClick","Page","Content","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGO,SAASA,IAA0E,IAA5DC,EAA2D,uDAAzB,SAC5D,MAAO,CACHC,QAAS,OACTD,gBACAE,WAAY,SACZC,eAAgB,UAWxB,SAASC,IACL,IAPeC,EASf,OATeA,EAOD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAN/BC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAenD,IAGaC,EAAqD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QACtE,EAAwBC,mBAAiBT,KAAzC,mBAAOU,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAQ,IAA1C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAVV,SAAuBP,GACnB,OAAOL,KAAKC,MAAM,IAAYI,GASbQ,CAAcR,GAE/B,SAASS,IACLL,EAAQX,KACRa,EAVc,qCAWdI,YAAW,WACPJ,EAXQ,wCAYTC,EAAW,GAYlB,OATAI,qBAAU,WACN,GAAIV,EAAS,CACT,IAAMW,EAAUC,YAAYJ,EAAaF,GACzC,OAAO,WACHO,cAAcF,QAMtB,qBAAKG,MAAK,aACNC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,WACd9B,KAJP,SAMI,sBAAMiB,UAAWA,EAAWU,MAAO,CAC/BI,SAAU,SADd,SAEIhB,O,gBCpDHiB,EAA4C,SAAC,GAEnD,IADHC,EACE,EADFA,OAAQpB,EACN,EADMA,QAASqB,EACf,EADeA,WAiBXC,EAAQtB,EAAO,eAErB,OACI,sBAAKc,MAAK,eACH3B,EAAc,QADrB,UAGI,uBAAM2B,MAAO,CAAES,OAAQ,OAAvB,UACI,sBAAMT,MAAO,CAAEU,YAAa,MAAON,SAAU,QAA7C,iBACA,cAAC,IAAD,CAAaO,SAtBR,SAACC,GACd,IAAM3B,EAAM4B,SAASD,GACjBE,OAAOC,MAAM9B,GACbqB,EATQ,IAYRA,EAAOrB,IAgB8B+B,KAAK,QAAQC,aAAa,UAE/D,cAAC,IAAD,CAAQC,QAdA,WACZX,GAAYrB,IAakB8B,KAAK,QAAQhB,MAAO,CAC1CC,MAAO,QADX,SAEIO,QCrCHW,EAAiB,WAC1B,MAAsBhC,mBAAiB,IAAvC,mBAAOF,EAAP,KAAYqB,EAAZ,KACA,EAA8BnB,oBAAkB,GAAhD,mBAAOD,EAAP,KAAgBqB,EAAhB,KAEA,OACI,sBAAKP,MAAO,GAAZ,UAGI,cAAC,EAAD,CAAOf,IAAKA,EAAKC,QAASA,IAC1B,cAAC,EAAD,CAAcoB,OAAQA,EAAQpB,QAASA,EAASqB,WAAYA,QCL3Da,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,OACE,qBAAKrB,MAAK,aACRC,MAAO,QACPC,OAAQ,SACL7B,KAHL,SAKGgD,KAgBQC,MAVf,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,UACE,cAAC,EAAD,SCXOiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be267d07.chunk.js","sourcesContent":["import { CSSProperties, useEffect, useState } from \"react\"\n\n\nexport function CSSCenterFlex(flexDirection: 'column' | 'row' = 'column'): CSSProperties {\n    return {\n        display: 'flex',\n        flexDirection,\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n}\n\n\nfunction sample<T>(array: T[]): T {\n    const index = Math.floor(Math.random() * array.length)\n\n    return array[index]\n}\n\nfunction generateNote(): string {\n    const notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n\n    return sample(notes)\n}\n\nfunction bpmToInterval(bpm: number): number {\n    return Math.floor(60 * 1000 / bpm)\n}\n\nconst ANIMATTION_ENTER = `animate__animated animate__fadeIn`\nconst ANIMATION_EXIT = `animate__animated animate__fadeOut`\n\nexport const Notes: React.FC<{ bpm: number, playing: Boolean }> = ({ bpm, playing }) => {\n    const [note, setNote] = useState<string>(generateNote())\n    const [className, setClassName] = useState<string>(``)\n    const interval = bpmToInterval(bpm)\n\n    function refreshNote() {\n        setNote(generateNote())\n        setClassName(ANIMATTION_ENTER)\n        setTimeout(() => {\n            setClassName(ANIMATION_EXIT)\n        }, interval / 2)\n    }\n\n    useEffect(() => {\n        if (playing) {\n            const timerId = setInterval(refreshNote, interval)\n            return function cleanup() {\n                clearInterval(timerId)\n            }\n        }\n    })\n\n    return (\n        <div style={{\n            width: '40vw',\n            height: '40vh',\n            backgroundColor: 'skyblue',\n            ...CSSCenterFlex(),\n        }}>\n            <span className={className} style={{\n                fontSize: '120px',\n            }}>{note}</span>\n        </div>\n    )\n}","import { Button, InputNumber, message } from \"antd\"\nimport { CSSCenterFlex } from \"./notes\"\n\ninterface ControlPanelProps {\n    setBpm: (bpm: number) => void,\n    playing: Boolean,\n    setPlaying: (playing: Boolean) => void,\n}\n\nconst DEFAULT_BPM = 60\n\nexport const ControlPanel: React.FC<ControlPanelProps> = ({\n    setBpm, playing, setPlaying,\n}) => {\n\n    const onChange = (value: string) => {\n        const bpm = parseInt(value)\n        if (Number.isNaN(bpm)) {\n            setBpm(DEFAULT_BPM)\n        }\n        else {\n            setBpm(bpm)\n        }\n    }\n\n    const onClick = () => {\n        setPlaying(!playing)\n    }\n\n    const label = playing ? `STOP` : `START`\n\n    return (\n        <div style={{\n            ...CSSCenterFlex('row'),\n        }}>\n            <span style={{ margin: '8px' }}>\n                <span style={{ marginRight: '4px', fontSize: '18px' }}>{`bpm`}</span>\n                <InputNumber onChange={onChange} size=\"large\" defaultValue=\"60\" />\n            </span>\n            <Button onClick={onClick} size=\"large\" style={{\n                width: '90px'\n            }}>{label}</Button>\n        </div>\n    )\n}","import { useState } from \"react\"\nimport { ControlPanel } from \"./control\"\nimport { Notes } from \"./notes\"\n\nexport const Page: React.FC = () => {\n    const [bpm, setBpm] = useState<number>(40)\n    const [playing, setPlaying] = useState<Boolean>(false)\n\n    return (\n        <div style={{\n\n        }}>\n            <Notes bpm={bpm} playing={playing} />\n            <ControlPanel setBpm={setBpm} playing={playing} setPlaying={setPlaying} />\n        </div>\n    )\n}","import './App.css'\n\nimport \"animate.css\"\nimport 'antd/dist/antd.css'\nimport { CSSCenterFlex } from './components/notes'\nimport { Page } from './components'\n\n\nexport const Content: React.FC = ({ children }) => {\n  return (\n    <div style={{\n      width: '100vw',\n      height: '100vh',\n      ...CSSCenterFlex(),\n    }}>\n      {children}\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Content>\n        <Page />\n      </Content>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}